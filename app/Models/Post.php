<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class Post extends Model
{
    use HasFactory;// protected $fillable=['title','excerpt','body'];
    protected $guarded=['id'];
    protected $with = ['category','author'];
    public function getRouteKeyName()
    {
        //return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
        return 'slug';
    }

    public static function find($id)
    {
        return static::all()->firstwhere('id', $id);
    }
    public static function findOrFail($slug)
    {//if(! file_exists($path=resource_path("posts/{$slug}.html"))){throw new ModelNotFoundException();  }return cache()->remember("posts-{$slug}",5,fn()=>file_get_contents($path));

        $post = static::find($slug);
        if(!$post)
            return throw new ModelNotFoundException();
        return $post;
    }
    public function scopeFilter($query,array $filters)
    {
        $query->when($filters['search'] ?? false, function ($query, $search) {
            $query->where(fn($query) =>
                 $query->where('title', 'like', '%' . $search . '%')
                ->orwhere('body', 'like', '%' . $search . '%')
            );
        });
        $query->when($filters['category'] ?? false, fn($query, $category) =>
                $query->whereHas('category', fn($query) => $query->where('slug',$category)));
        $query->when($filters['author'] ?? false, fn($query, $author) =>
                $query->whereHas('author', fn($query) => $query->where('username',$author)));


    }
    public function scopeByCategory($query, $categoryId)
    {
        return $query->where('category_id', $categoryId);
    }
    public function category()
    {
        return $this->belongsTo(Category::class);
    }
    public function author()
    {
        return $this->belongsTo(User::class,'user_id');
    }

}
